/*
 * Read json files generated by tracker-server, do preprocessing stuff,
 * recreate or symlink static files if they has changed.
 */

var $ = require('../deps/sharedjs'),
    n = require('../deps/natives'),
    deps = require('./deps'),
    utils = require('./utils');

/**
 * Default options object
 * @enum {*}
 * @export
 */
exports.options = {
    // processors options
    processors: {
        transport: {
            filter: /require\.js$/
        },
        uglifyjs: true
    },
    copy: {
        src: null, // absolute path to the sources dir
        target: null, // absolute path to the public dir
        pattern: null // regex for enabled files
    },
    combine: {
        deps: 'main.js', // relative path to the bootstrap file
        pattern: /\.js|\.css$/,
        filter: null
    }
};


// require processors
var processors = {};
n.fs.readdirSync(__dirname + '/processors').forEach(function(name) {
    name = name.replace(/\.js$/, '');
    processors[name] = require('./processors/' + name);
});

/**
 * Combine files to one and write to disk.
 * @param {Object} files filename:content hash.
 * @param {Object} o options.
 */
function combine(paths, o) {
    var path, data = '',
        main = n.path.join(o.copy.target, o.combine.deps),
        filter = o.combine.filter,
        pattern = o.combine.pattern;

    function add(path) {
        // path is pattern valid and is not in filter
        if ((!pattern || pattern.test(path)) &&
            (!filter || !filter.test(path))) {
            data += n.fs.readFileSync(path, 'utf-8');
        }
    }

    if (o.combine.deps) {
        deps.find(main).forEach(function(path) {
            add(path);
        });
    } else {
        for (path in paths) {
            add(path);
        }
    }

    n.fs.writeFileSync(main, data, 'utf-8');
}

/**
 * Create a build.
 * @param {Object} opts options object, will extend defaults.
 * @export
 */
exports.build = function(opts) {
    var o = $.extend(true, {}, exports.options, opts),
        files = {},
        c = o.copy;

    // copy all files
    utils.copy(c.src, c.target, c.pattern, function(err, src, targetPaths) {
        // combine files
        if (o.combine) {
            combine(targetPaths, o);
        }
                
        // process files
        if (o.processors) {
            $.each(o.processors, function(opts, name) {
                var i, path, proc = processors[name];

                for (i = 0; i < targetPaths.length; ++i) {
                    path = targetPaths[i];
                    if (!files[path] && proc.pattern.test(path)) {
                        files[path] = n.fs.readFileSync(path, 'utf-8');
                    }

                    if (files[path]) {
                        files[path] = proc.run(path, files[path], o);
                        n.fs.writeFileSync(
                            targetPaths[i],
                            files[path],
                            'utf-8'
                        );
                    }
                }
            });
        }
    });
};
