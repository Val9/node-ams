/*
 * Read json files generated by tracker-server, do preprocessing stuff, 
 * recreate or symlink static files if they has changed.
 */

var $ = require('../deps/sharedjs'),
    n = require('../deps/natives'),
    deps = require('./deps'),
    utils = require('./utils');

exports.options = {
    processors: {
        transport: null,
    },
    target: null,
    src: null,
    root: null, 
    deps: true,
    filter: null, // regexp to filter files
    rec: true, // if src is dir, rec defines if files search should be recursive
    combine: true,
};


var processors = {};
// require processors
n.fs.readdirSync(__dirname + '/processors').forEach(function(name) {
    name = name.replace(/\.js$/, '');
    processors[name] = require('./processors/' + name);    
});

exports.build = function(opts) {
    var o = $.extend({}, exports.options, opts),
        paths,
        files = {},
        file, data = '',
        stat = n.fs.statSync(opts.src);
    
    
    
    if (stat.isFile()) {
        // add dependencies 
        if (o.deps) {
            paths = require('./deps').find(o.src);
        } else {
            paths = [o.src];
        }
    } else if (stat.isDirectory()) {
        paths = utils.find(o.src, o.filter, o.rec);    
    }
    
    paths.forEach(function(path, i) {
        files[path] = n.fs.readFileSync(path, 'utf-8');
    });
    
    $.each(o.processors, function(opts, name) {
        for (file in files) {
            files[file] = processors[name].run(file, files[file], o);
        }
    });
    
    if (o.combine) {
        for (file in files) {
            data += files[file];
        }
        
        n.fs.writeFileSync(o.target, data, 'utf-8');        
    }
    
    return data;
};